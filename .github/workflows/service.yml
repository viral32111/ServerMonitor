name: Service

on:
  push:
    paths:
      - 'Service/**'
      - '.github/workflows/service.yml'
    branches:
      - '**'
    tags:
      - '*.*.*'
  pull_request:
    branches:
    - '**'
  workflow_dispatch:

env:
  ARTIFACT_NAME: ServerMonitor-Service
  DOCKER_IMAGE_NAME: server-monitor
  DOCKER_REGISTRY_DOMAIN: ghcr.io

jobs:
  build-test:
    name: Build & Test
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./Service/
    permissions:
      contents: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --nologo --configuration Release --no-restore --no-self-contained

      - name: Run tests
        run: dotnet test --nologo --configuration Release --no-build

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            ./Service/ServerMonitor/bin/Release/net7.0/*.dll
            ./Service/ServerMonitor/bin/Release/net7.0/*.json

  launch:
    name: Launch Test
    runs-on: ${{ matrix.os }}
    needs: build-test
    defaults:
      run:
        working-directory: ./Service/
    strategy:
      matrix:
        os: [ ubuntu-22.04, windows-2022 ]
    permissions:
      contents: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./Service/Artifact/

      - name: Launch collector mode
        run: dotnet ./Artifact/ServerMonitor.dll --once collector

      - name: Launch connection-point mode
        run: dotnet ./Artifact/ServerMonitor.dll --once connector

  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    needs: launch
    defaults:
      run:
        working-directory: ./Service/
    concurrency:
      group: deploy-service
      cancel-in-progress: true
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64
          # https://github.com/docker/build-push-action/issues/761
          driver-opts: |
            image=moby/buildkit:v0.10.6

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY_DOMAIN }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./Service/Artifact/

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}
          flavor: latest=true
          tags: |
            type=ref,event=pr
            type=ref,event=branch
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
          labels: |
            org.opencontainers.image.title=Server Monitor
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            com.docker.extension.publisher-url=https://viral32111.com

      - name: Build & push Docker image
        uses: docker/build-push-action@v4
        with:
          push: ${{ github.event_name != 'pull_request' }}
          file: ./Service/Dockerfile
          context: ./Service/Artifact/
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          no-cache: true
          pull: true

      - name: Delete untagged Docker images
        if: always()
        continue-on-error: true
        uses: snok/container-retention-policy@v1
        with:
          image-names: ${{ env.DOCKER_IMAGE_NAME }}
          cut-off: 0 seconds ago UTC
          keep-at-least: 1
          untagged-only: true
          account-type: personal
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_PACKAGES }}

  release:
    name: Release
    runs-on: ubuntu-22.04
    needs: launch
    defaults:
      run:
        working-directory: ./Service/
    if: github.ref_type == 'tag' && github.event_name != 'pull_request'
    permissions:
      contents: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./Service/Artifact/

      - name: Bundle build artifacts
        run: |
          cd ./Artifact/
          zip -r ./ServerMonitor-Service.zip $(find ./)

      - name: Create draft release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          draft: true
          files: ./Service/ServerMonitor-Service.zip
          body: ${{ github.ref_name }}
